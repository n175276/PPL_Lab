Questions
---------

        1   Do you notice that each usage of local variable as an operand uses asuffix that can be tracked to it's assignment? Why do some variables have a suffix `(D)'?

ans:
In compiler design, static single assignment form (often abbreviated as SSA form or simply SSA) is a property of an intermediate representation (IR), which requires that each variable be assigned exactly once, and every variable be defined before it is used. Existing variables in the original IR are split into versions, new variables typically indicated by the original name with a subscript in textbooks, so that every definition gets its own version. In SSA form, use-def chains are explicit and each contains a single element.


        2   Find the point in the CFG in  which the paths of the two assignments   to variable `a'  and `b' merge. You will notice  that PHI statements  have  been  introduced.  Can  you   guess  the  syntax  of  the  PHI statements?

ans:
 <bb 5>:
  c = a + b;
A compiler can implement a Î¦ function by inserting "move" operations at the end of every predecessor block. 
<bb 5>:
  c = a + b;
  D.1415 = 0;

<L3>:
  return D.1415;




        3   Can you think of an example in which a PHI node merges more than two versions of a variable?
ans:no




